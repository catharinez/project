# *************************************************
# Author: Catharine and Noshin
# Date: December 11, 2021
# Last modified: January 1, 2022 2:00 am by Noshin
# Name: Python Project (Wildlife Survival Guide)
# Description: Pygame project which teaches a lesson about the wildlife survival lesson
# *************************************************
import pygame
import pygame.gfxdraw
import time
myfont = pygame.font.SysFont("monospace", 15)
label = myfont.render

pygame.init()
pygame.mixer.init()
hit = pygame.mixer.Sound("music.wav")
screen = pygame.display.set_mode((1000, 800))
clock = pygame.time.Clock()

buttons = pygame.sprite.Group()
class Button(pygame.sprite.Sprite):
    def __init__(self, position, text, size,
        colors="lightgreen on green",
        hover_colors="darkgreen on green",
        style="buttona",
        borderc=(255,255,255),
        command=lambda: print("No command is being activated for this button")):

        # the hover_colors attribute needs to be fixed
        super().__init__()
        global num

        self.text = text
        self.command = command

        # create the colors 
        self.colors = colors
        self.original_colors = colors
        self.fg, self.bg = self.colors.split("start")

        # hover_colors
        if hover_colors == "darkgreen on green":
            self.hover_colors = f"{self.bg} on {self.fg}"
        else:
            self.hover_colors = hover_colors

        # styles can be buttona or buttonb
        self.style = style
        self.borderc = borderc
        # font
        self.font = pygame.font.SysFont("monospace", size)
        self.render(self.text)
        self.x, self.y, self.w , self.h = self.text_render.get_rect()
        self.x, self.y = position
        self.rect = pygame.Rect(self.x, self.y, 500, self.h)
        self.position = position
        self.pressed = 1

        # create the group with all the buttons
        buttons.add(self)

    def render(self, text):
        #create surface
        self.text_render = self.font.render(text, 1, self.fg)

        # create the surface in the image attributes
        self.image = self.text_render

    def update(self):
        self.fg, self.bg = self.colors.split("start")
        if self.style == "buttona":
            self.draw_buttona()
        elif self.style == "buttonb":
            self.draw_buttonb()
        if self.command != None:
            self.hover()
            self.click()

    def draw_buttona(self):
        # horizontal up
        lcolor = (150, 150, 150)
        lcolor2 = (50, 50, 50)
        pygame.draw.line(screen, lcolor, self.position,
            (self.x + self.w , self.y), 5)
        pygame.draw.line(screen, lcolor, (self.x, self.y - 2),
            (self.x, self.y + self.h), 5)
        # horizontal down
        pygame.draw.line(screen, lcolor2, (self.x, self.y + self.h),
            (self.x + self.w , self.y + self.h), 5)
        pygame.draw.line(screen, lcolor2, (self.x + self.w , self.y + self.h),
            [self.x + self.w , self.y], 5)
        # background of the button
        pygame.draw.rect(screen, self.bg, self.rect)  

    def draw_buttonb(self):
        pygame.draw.rect(screen, self.bg, (self.x - 50, self.y, 500 , self.h))
        pygame.gfxdraw.rectangle(screen, (self.x - 50, self.y, 500 , self.h), self.borderc)

    def check_collision(self):
        if self.rect.collidepoint(pygame.mouse.get_pos()):
            self.colors = self.hover_colors
        else:
            self.colors = self.original_colors

    def hover(self):
        self.check_collision()

    def click(self):
        if self.rect.collidepoint(pygame.mouse.get_pos()):
            if pygame.mouse.get_pressed()[0] and self.pressed == 1:
                print("The answer is:'" + self.text + "'")
                self.command()
                self.pressed = 0

            if pygame.mouse.get_pressed() == (0,0,0):
                self.pressed = 1

def on_click():
    print("Click on the correct answer")

def on_right():
    check_score("right")

def on_false():
   check_score()

def check_score(answered="wrong"):
    global qnum, points

    hit.play() # click sound
    if qnum < len(questions):
        print(qnum, len(questions))
        if answered == "right":
            time.sleep(.1)
            points += 1

            # Show the score text
        qnum += 1 # counter for next question in the list
        score.change_text(str(points))
        # Change the text of the question
        title.change_text(questions[qnum-1][0], color="greem")
        # change the question number
        num_question.change_text(str(qnum))
        show_question(qnum)
        

    # for the last question...
    elif qnum == len(questions):
        print(qnum, len(questions))
        if answered == "right":
            kill()
            time.sleep(.1)
            points +=1
        score.change_text("You reached a score of " + str(points))
    time.sleep(.5)




questions = [
    ["Question 1: Eating raw meat can possibly cause all of the following poisonings except:", ["Lead", "E.coli", "Salmonella", "Scombroid"]],
    ["Question 2: What is the first step in order to build a fire?", ["Place logs in a cross structure", "If matches are available, use a match to start a fire. Otherwise, rub sticks together to start a fire", "Clear a circular area and surround it using large rocks", "Use twigs and leaves as natural kindling"]],
    ["Question 3: Which of the following should you not do when trying to signal a helicopter?", ["Make a “Y” shaped arm gesture", "Yell for help", "Start a fire", "Wave your arms in a crossed position above your head"]],
    ["Question 4: When you are hungry in an unknown place, the best thing to do is:", ["Eat nothing", "Drink water", "Find berries", "Hunt and eat raw meat"]],
    ["Question 5: From the interactive story, what was the first thing you did?", ["Find food", "Find shelter", "Find humans", "Find water"]],
]




def show_question(qnum):
    # Kills the previous buttons/sprites
    kill()

    
    # The 4 position of the buttons
    pos = [100, 150, 200, 250]

    Button((10, 100), "a. ", 36, "lightgreen on green",
        hover_colors="darkgreen on green", style="buttonb", borderc=(255,255,0),
        command=None)
    Button((10, 150), "b. ", 36, "lightgreen on green",
        hover_colors="darkgreen on green", style="buttonb", borderc=(255,255,0),
        command=None)
    Button((10, 200), "c. ", 36, "lightgreen on green",
        hover_colors="darkgreen on green", style="buttonb", borderc=(255,255,0),
        command=None)
    Button((10, 250), "d. ", 36, "lightgreen on green",
        hover_colors="darkgreen on green", style="buttonb", borderc=(255,255,0),
        command=None)

    Button((50, pos[0]), questions[qnum-1][1][0], 36, "lightgreen on green",
        hover_colors="darkgreen on green", style="buttonb", borderc=(255,255,0),
        command=on_right)
    Button((50, pos[1]), questions[qnum-1][1][1], 36, "lightgreen on green",
        hover_colors="darkgreen on green", style="buttonb", borderc=(255,255,0),
        command=on_false)
    Button((50, pos[2]), questions[qnum-1][1][2], 36, "lightgreen on green",
        hover_colors="darkgreen on green", style="buttonb", borderc=(255,255,0),
        command=on_false)
    Button((50, pos[3]), questions[qnum-1][1][3], 36, "lightgreen on green",
        hover_colors="darkgreen on green", style="buttonb", borderc=(255,255,0),
        command=on_false)


def kill():
    for _ in buttons:
        _.kill()

qnum = 1
points = 0
# ================= SOME LABELS ==========================
num_question = label(screen, str(qnum), 0, 0)
score = label(screen, "monospace", 50, 300)
title = label(screen, questions[qnum-1][0], 10, 10, 55, color="green")
write1 = label(screen, "Wildlife Survival Quiz", 50, 350, 20, color="darkgreen")

def start_again():
    pass

def loop():
    global game_on

    show_question(qnum)

    while True:
        screen.fill(0)
        for event in pygame.event.get():
            if (event.type == pygame.QUIT):
                pygame.quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    pygame.quit()
        buttons.update() #                     update buttons
        buttons.draw(screen)
        clock.tick(60)
        pygame.display.update()
    pygame.quit()

if __name__ == '__main__':
    pygame.init()
    game_on = 1
    loop()
